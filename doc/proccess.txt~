This is the creation Process

*****************EACH SECTION SHALL START WiTH THIS

X****************EACH FAILED SECTION WILL HAVE AN X

*****************START 
gem install rails
chruby ruby-2.2.2
rails new project_name
cd project_name
CREATE .ruby-version CONTAINING ruby-2.2.2

*****************END

*****************START LOCAL SERVER
 rails server -p 3001 -d # ACTIVATE SERVER -p PORT -d DAEMON/RUN IN BACKGROUND
****************END

****************RESOURCES
  creates options to CRUD Create Read Update Destroy

  HELPERS
  photos_path returns /photos
  new_photo_path returns /photos/new
  edit_photo_path(:id) returns /photos/:id/edit (for instance, edit_photo_path(10) returns /photos/10/edit)
  photo_path(:id) returns /photos/:id (for instance, photo_path(10) returns /photos/10)

  *****************SINGLE ROUTE
    member do
      get 'preview'
    end
    OR
    get 'preview', on: :member
    CREATES HELPERS
    preview_photo_path
    preview_photo_url
  *****************END

  PATH VS URL
  Path - partial
  URL - Complete path
****************END

****************GENERATE COMMANDS
/bin/rails generate controller contr_name action
  makes a controller file called contr_name_controller
  makes view for each action: action.html.erb
  creates tests

rails generate model Clubs name:string about:text -MODEL
  creates migrate file
  creates model club.rb
  creates tests

****************END

****************BOOTSTRAP
gem 'bootstrap-sass',       '3.2.0.0'
touch app/assets/stylesheets/custom.css.scss
in custom.css.scss:
@import "bootstrap-sprockets";
@import "bootstrap";
****************END

****************MIGRATIONS
  rake db:migrate -migrates
  rake db:rollback -if you make a mistake
****************END

****************ActiveRecords::Base commands
  update_attributes(param: value, param: value)
  update_attributes(:param, value)
  all
  find(:id)
  find_by(param)
  destroy
  save
  new
  valid?
****************END
  
****************TESTING
  FORMAT
  def setup
    @example = Example.new(this: "this", that: "that")
  end
  test "what this does" do
    assert OR not_assert OR assert_equal @example.valid?
  end
  TESTS
  validation testing
    uniqueness
    valid
    presence
    ....
****************END

****************CLUBS FIRST STEP
  /bin/rails generate controller clubs index
  *******************CLUBS CONTROLLER METHODS
    public
      index
      show
      create
      edit
      update
      destroy
    private
      set_club
      club_params
  *******************END
  
  *******************CLUB VIEWS
    index.html.erb
    new.html.erb
    show.html.erb
    edit.html.erb
    _form.html.erb  
    about.html.erb
  ******************END
****************END

*****************CREATING USERS
  rails generate controller Users new
  rails generate model User first_name:string last_name:string email:string
  email involves adding inex to database via migration:
   rails generate migration add_index_to_users_email
  VALIDATION
    email and first and last name TEST
    email uses REGULAR EXPRESSION (REGEX) string pattern matching
  ******************PASSWORD
    uses HASH value matching so the website does not contain actual password in database.
    in user.rb has_secure_password
      ADDS
      password_digest attribute
      password and password_confirmation: including presence validations and match validation
      authenticate method: returns the user when password is correct and false otherwise
      * model must have password_digest to work (synonym to hashed password)
      END
    rails generate migration add_password_digest_to_users password_digest:string
    INFO: uses bcrypt hash function
    in Gemfile add: gem 'bcrypt',               '3.1.7'
    TERMINAL: bundle install
    AUTHENTICATE
      user.authenticate("password") returns user or false
      !!user.authenticate("correct_password")
        => true
    END AUTH
  ******************END

  ******************LOGIN SESSION
    Session: HTTP can't remember user's identity. Thus a user must log in to a 'session' Semi-perminent connection between two computers.
    ex: client running web browser and server running rails
    cookies: persist from page to page and can store information
    METHOD: session. expire on browser close.
    COOKIES: longer session
    RESTful `new` session: sign in form. `create` session: login. `destoy` session: logout
    Instead of database backend, cookies
    rails generate controller Sessions new
    automatically generates SessionsHelper

    in routes.rb (not resources :sessions)
    get    'login'   => 'sessions#new'
    post   'login'   => 'sessions#create'
    delete 'logout'  => 'sessions#destroy'

    new form returns params[:session] containing password and email

    create and destroy functions in sessions_controller
    include SessionsHelper in application_controller

    `session` method -- *seperate from sessions controller
    places temporary cookie on browser containing encrypt user id. retrieve id using `session[:user_id] (ends when close browser)

    ADD TO HELPER:
    # Logs in the given user.
    def log_in(user)
      session[:user_id] = user.id
    end
    Once logged in <%= current_user.name %>
                   redirect_to current_user
    find current user with User.find_by(id: session[:user_id]
    current_user function defined in SessionsHelper class
  ******************END

******************END

******************NESTED RESOURCES
  class Clubs < ActiveRecord::Base
    has_many :topics, dependent: :delete
  end
 
  class Ad < ActiveRecord::Base
    belongs_to :club
  end

  in routes.rb:
    resources :clubs do
      resources :topics
    end

  @order = @customer.orders.create(order_date: Time.now)
******************END
