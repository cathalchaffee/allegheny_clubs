module SessionsHelper
  # Logs in the given user.
  def log_in(user)
    session[:user_id] = user.id
  end

  #easy way to reference current user
  def current_user
    @current_user ||= User.find_by(id: session[:user_id])
  end

  # Returns true if the user is logged in, false otherwise
  def logged_in?
    !current_user.nil?  
  end
end

******************LOGIN SESSION
    Session: HTTP can't remember user's identity. Thus a user must log in to a 'session' Semi-perminent connection between two computers.
    ex: client running web browser and server running rails
    cookies: persist from page to page and can store information
    METHOD: session. expire on browser close.
    COOKIES: longer session
    RESTful `new` session: sign in form. `create` session: login. `destoy` session: logout
    Instead of database backend, cookies
    rails generate controller Sessions new
    automatically generates SessionsHelper

    in routes.rb (not resources :sessions)
    get    'login'   => 'sessions#new'
    post   'login'   => 'sessions#create'
    delete 'logout'  => 'sessions#destroy'

    new form returns params[:session] containing password and email

    create and destroy functions in sessions_controller
    include SessionsHelper in application_controller

    `session` method -- *seperate from sessions controller
    places temporary cookie on browser containing encrypt user id. retrieve id using `session[:user_id] (ends when close browser)

    ADD TO HELPER:
    # Logs in the given user.
    def log_in(user)
      session[:user_id] = user.id
    end
    Once logged in <%= current_user.name %>
                   redirect_to current_user
    find current user with User.find_by(id: session[:user_id])
    current_user function defined in SessionsHelper class
******************END
